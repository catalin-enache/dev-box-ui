
minimal imports: import someStuff from node_modules/dev-box-ui/webcomponents/someStuff
distribution import: put distribution in head script then import someStuff from dev-box-ui
normal import: import someStuff from dev-box-ui

most-probably react components should take care of importing by themselves the web component they wrap
in this case we have to solve supporting style override from outside

improve appendStyle to allow chaining

improve appearance of title and sections on mobile

check box-shadow on rtl

do a navigation service

do a copyToClipboard utility - maybe even a web-component

on form inputs style the wrapper div not the input itself
extract and reuse the common look & feel for form inputs (use the same vars also)

remove log messages in production (NODE_ENV)

why classnames does not appear in vendors list ?

when react-components will wrap web-components there will be no need for classnames dependency

expose utils, decorators, traits and base classes
document how user can extend Base class and apply existing behaviours
in other words document how user can define its web-components using exposed internals

add favicon.ico

document lack of support for: delegatesFocus: true
make pages for documenting features like Focusable and how to use css[focusable]?

document dev-box-ui purpose, browser support etc - some general words

do a change-log when publishing the library

unittest web-components in iFrame
create event helpers for unittests
in unittests we should test among other things:
  - web component can be dir aware (css in template)
  - css vars are inherited and style can be overridden
  - we have some default css vars injected when using the lib (like input height)
  - web component are not registered multiple times even if using a mix of import styles
  - web components register their dependencies before they register self
  - web component can use external renderers like the col renderer in a table or option renderer in select

