
react components should document their dependencies on web-components
and define them as an array on a static method webComponentsDependencies
so that the user can inspect them and take care of defining by importing
and calling registerSelf() for each of them


make setters and getters dynamically to avoid boilerplate

mouse/pointer events

intelligent forms (with message passing, value aggregating, validating)

passing messages is not the same as reading global variables
think of a child just appended into a tree which already consumed messages from root
what if we change root dir then append some children down the tree ?

we have to communicate (ancestors/descendants) in the shadow dom tree but in light dom too (form <-> inputs)

onLocaleChange should hook only when user sets locale-aware attribute and it should propagate inside shadow DOM
eventually it should propagate locale in light DOM if user sets propagate-locale-in-light-dom


proposal:
  get lightDomChildren()
  get lightDomParent()
  get shadowDomChildren()
  get shadowDomParent()

  get lightDomContextProvide()
  get lightDomContextSubscribe()
  get shadowDomContextProvide()
  get shadowDomContextSubscribe()

  lightDomSendMessage()
  lightDomSendMessageToParent()
  lightDomSendMessageToParentAndSelf()
  lightDomSendMessageToChildren()
  lightDomSendMessageToChildrenAndSelf()
  shadowDomSendMessage()
  shadowDomSendMessageToParent()
  shadowDomSendMessageToParentAndSelf()
  shadowDomSendMessageToChildren()
  shadowDomSendMessageToChildrenAndSelf()



what behaviour when component is adopted ?
inject global css to handle dbui-web-component (hide when not defined, un hide when defined)

make locale/I18n service able to target custom areas instead of always html element
so we can use it only in tabs/result

improve appearance of title and sections on mobile

check box-shadow on rtl

do a routing service

do a copyToClipboard utility - maybe even a web-component

on form inputs style the wrapper div not the input itself
extract and reuse the common look & feel for form inputs (use the same vars also)

remove log messages in production (NODE_ENV)

when react-components will wrap web-components there will be no need for classnames dependency

expose utils, decorators, traits and base classes
document how user can extend Base class and apply existing behaviours
in other words document how user can define its web-components using exposed internals

add favicon.ico

document lack of support for: delegatesFocus: true
make pages for documenting features like Focusable and how to use css[focusable]?

document dev-box-ui purpose, browser support etc - some general words

do a change-log when publishing the library

unittest web-components in iFrame
create event helpers for unittests
in unittests we should test among other things:
  - web component can be dir aware (css in template)
  - css vars are inherited and style can be overridden
  - we have some default css vars injected when using the lib (like input height)
  - web component are not registered multiple times even if using a mix of import styles (ensureSingleRegistration)
  - web components register their dependencies before they register self
  - web component can use external renderers like the col renderer in a table or option renderer in select

